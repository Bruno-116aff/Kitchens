import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/*
üöÄ –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ö–£–•–û–ù–¨

–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
*/

const imagesPath = path.join(__dirname, '..', 'public', 'images', 'portfolio');

// –®–∞–±–ª–æ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–π
const DESCRIPTIONS = {
	modern: [
		'–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫—É—Ö–Ω—è —Å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –≥–ª—è–Ω—Ü–µ–≤—ã–º–∏ —Ñ–∞—Å–∞–¥–∞–º–∏',
		'–°—Ç–∏–ª—å–Ω–∞—è –∫—É—Ö–Ω—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π',
		'–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫—É—Ö–Ω—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ –ø—Ä—è–º—ã–º–∏ –ª–∏–Ω–∏—è–º–∏',
	],
	classic: [
		'–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫—É—Ö–Ω—è —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ —Ñ–∞—Å–∞–¥–∞–º–∏ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏',
		'–≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –∫—É—Ö–Ω—è –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ —Å –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏',
		'–£—é—Ç–Ω–∞—è –∫—É—Ö–Ω—è —Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º –∏ —Ç–µ–ø–ª—ã–º–∏ —Ç–æ–Ω–∞–º–∏',
	],
	scandinavian: [
		'–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∞—è –∫—É—Ö–Ω—è —Å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º –¥–µ—Ä–µ–≤–æ–º –∏ —Å–≤–µ—Ç–ª—ã–º–∏ —Ç–æ–Ω–∞–º–∏',
		'–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∫—É—Ö–Ω—è –≤ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–æ–º —Å—Ç–∏–ª–µ —Å –ø—Ä–∏—Ä–æ–¥–Ω—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏',
		'–°–≤–µ—Ç–ª–∞—è –∫—É—Ö–Ω—è —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º',
	],
	industrial: [
		'–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–∞—è –∫—É—Ö–Ω—è —Å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏ –≥—Ä—É–±—ã–º–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏',
		'–õ–æ—Ñ—Ç–æ–≤–∞—è –∫—É—Ö–Ω—è –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ —Å –±–µ—Ç–æ–Ω–Ω—ã–º–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—è–º–∏',
		'–£—Ä–±–∞–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫—É—Ö–Ω—è —Å –∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º–∏',
	],
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
function getStyleFromFileName(fileName) {
	const name = fileName.toLowerCase();
	if (name.includes('modern')) return 'modern';
	if (name.includes('classic')) return 'classic';
	if (name.includes('scandinavian')) return 'scandinavian';
	if (name.includes('industrial')) return 'industrial';

	// –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
	const styles = Object.keys(DESCRIPTIONS);
	return styles[Math.floor(Math.random() * styles.length)];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
function createDescription(fileName, fileSizeKB) {
	const style = getStyleFromFileName(fileName);
	const templates = DESCRIPTIONS[style];
	const baseDescription =
		templates[Math.floor(Math.random() * templates.length)];

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞
	let quality = '';
	if (fileSizeKB > 800) quality = ' –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è';
	else if (fileSizeKB > 400) quality = ' —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞';
	else if (fileSizeKB < 200) quality = ' —Å–∂–∞—Ç–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞';

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
	const features = [
		' —Å —ç—Ä–≥–æ–Ω–æ–º–∏—á–Ω–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–æ–π',
		' —Å –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–º –∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
		' —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π',
		' —Å —É–¥–æ–±–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏–∫–∏',
		' —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞',
	];

	const feature = features[Math.floor(Math.random() * features.length)];

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
	const conclusions = [
		' –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫—Ä–∞—Å–æ—Ç—ã –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç–∏.',
		' –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∂–∏–∑–Ω–∏.',
		' –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω.',
		' –°—Ç–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ–º–∞.',
	];

	const conclusion =
		conclusions[Math.floor(Math.random() * conclusions.length)];

	return `${baseDescription}${quality}${feature}.${conclusion}`;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function quickAnalyze() {
	console.log('üöÄ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫—É—Ö–æ–Ω—å...');

	if (!fs.existsSync(imagesPath)) {
		console.log('‚ùå –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', imagesPath);
		return;
	}

	const projects = fs
		.readdirSync(imagesPath, { withFileTypes: true })
		.filter(dirent => dirent.isDirectory())
		.map(dirent => dirent.name)
		.sort();

	console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);

	for (const project of projects) {
		console.log(`\nüì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${project}`);
		const projectPath = path.join(imagesPath, project);

		const files = fs
			.readdirSync(projectPath)
			.filter(file => /\.(jpg|jpeg|png)$/i.test(file))
			.sort();

		if (files.length === 0) {
			console.log(`‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ ${project}`);
			continue;
		}

		const descriptions = [];

		for (const file of files) {
			const filePath = path.join(projectPath, file);
			const stats = fs.statSync(filePath);
			const sizeKB = Math.round(stats.size / 1024);

			const description = createDescription(file, sizeKB);
			descriptions.push({
				file: file,
				sizeKB: sizeKB,
				description: description,
			});

			console.log(`   ‚úÖ ${file}: ${description.substring(0, 50)}...`);
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è
		const descriptionsPath = path.join(projectPath, 'descriptions.json');
		fs.writeFileSync(
			descriptionsPath,
			JSON.stringify(descriptions, null, 2),
			'utf8'
		);

		// –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
		const textPath = path.join(projectPath, 'descriptions.txt');
		let textContent = `–û–ü–ò–°–ê–ù–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ö–£–•–ù–ò\n`;
		textContent += `–ü—Ä–æ–µ–∫—Ç: ${project}\n`;
		textContent += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${descriptions.length}\n\n`;

		descriptions.forEach((item, index) => {
			textContent += `${index + 1}. ${item.file} (${item.sizeKB}KB)\n`;
			textContent += `${item.description}\n\n`;
		});

		fs.writeFileSync(textPath, textContent, 'utf8');

		console.log(`   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${descriptions.length} –æ–ø–∏—Å–∞–Ω–∏–π`);
	}

	console.log('\nüéâ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
	console.log(
		'üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ - —Ç–∞–º —Å–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã descriptions.json –∏ descriptions.txt'
	);
}

// –ó–∞–ø—É—Å–∫
quickAnalyze().catch(console.error);
