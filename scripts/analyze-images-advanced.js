import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/*
ü§ñ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –° –õ–û–ö–ê–õ–¨–ù–´–ú–ò AI –ú–û–î–ï–õ–Ø–ú–ò

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫—É—Ö–æ–Ω—å.
–¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫.

–£–°–¢–ê–ù–û–í–ö–ê:
1. pip install transformers torch pillow
2. pip install clip-by-openai
3. pip install sentence-transformers

–ò–õ–ò –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI.
*/

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
const imagesPath = path.join(__dirname, '..', 'public', 'images', 'portfolio');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
const ANALYSIS_CONFIG = {
	useAI: false, // –í–∫–ª—é—á–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑ (—Ç—Ä–µ–±—É–µ—Ç Python)
	useSimpleAnalysis: true, // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤
	createHTML: true, // –°–æ–∑–¥–∞—Ç—å HTML –≥–∞–ª–µ—Ä–µ—é
	createJSON: true, // –°–æ–∑–¥–∞—Ç—å JSON —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
};

// –®–∞–±–ª–æ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫—É—Ö–æ–Ω—å
const KITCHEN_TEMPLATES = {
	modern: [
		'–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫—É—Ö–Ω—è —Å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º',
		'–°—Ç–∏–ª—å–Ω–∞—è –∫—É—Ö–Ω—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ',
		'–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫—É—Ö–Ω—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏',
	],
	classic: [
		'–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫—É—Ö–Ω—è —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏',
		'–≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –∫—É—Ö–Ω—è –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ',
		'–£—é—Ç–Ω–∞—è –∫—É—Ö–Ω—è —Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º',
	],
	scandinavian: [
		'–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∞—è –∫—É—Ö–Ω—è —Å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏',
		'–°–≤–µ—Ç–ª–∞—è –∫—É—Ö–Ω—è –≤ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–æ–º —Å—Ç–∏–ª–µ',
		'–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∫—É—Ö–Ω—è —Å –ø—Ä–∏—Ä–æ–¥–Ω—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏',
	],
	industrial: [
		'–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–∞—è –∫—É—Ö–Ω—è —Å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏',
		'–õ–æ—Ñ—Ç–æ–≤–∞—è –∫—É—Ö–Ω—è –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ',
		'–£—Ä–±–∞–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫—É—Ö–Ω—è —Å –∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏',
	],
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –∫—É—Ö–Ω–∏ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
function detectKitchenStyle(fileName) {
	const name = fileName.toLowerCase();

	if (name.includes('modern') || name.includes('contemporary')) return 'modern';
	if (name.includes('classic') || name.includes('traditional'))
		return 'classic';
	if (name.includes('scandinavian') || name.includes('nordic'))
		return 'scandinavian';
	if (name.includes('industrial') || name.includes('loft')) return 'industrial';

	// –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è
	const styles = Object.keys(KITCHEN_TEMPLATES);
	return styles[Math.floor(Math.random() * styles.length)];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
function createDetailedDescription(imagePath, fileName) {
	const stats = fs.statSync(imagePath);
	const fileSizeKB = Math.round(stats.size / 1024);
	const style = detectKitchenStyle(fileName);

	// –ë–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
	let description =
		KITCHEN_TEMPLATES[style][
			Math.floor(Math.random() * KITCHEN_TEMPLATES[style].length)
		];

	// –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞
	if (fileSizeKB > 800) {
		description += ' –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è';
	} else if (fileSizeKB > 400) {
		description += ' —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞';
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è
	const styleDetails = {
		modern: [
			' —Å –≥–ª—è–Ω—Ü–µ–≤—ã–º–∏ —Ñ–∞—Å–∞–¥–∞–º–∏ –∏ —Ö—Ä–æ–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É—Ä–Ω–∏—Ç—É—Ä–æ–π',
			' —Å –ø—Ä—è–º—ã–º–∏ –ª–∏–Ω–∏—è–º–∏ –∏ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –≥–∞–º–º–æ–π',
			' —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π –∏ —Å–∫—Ä—ã—Ç—ã–º–∏ —Ä—É—á–∫–∞–º–∏',
		],
		classic: [
			' —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ —Ñ–∞—Å–∞–¥–∞–º–∏ –∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π —Ñ—É—Ä–Ω–∏—Ç—É—Ä–æ–π',
			' —Å –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏ —Ç–µ–ø–ª—ã–º–∏ —Ç–æ–Ω–∞–º–∏',
			' —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏',
		],
		scandinavian: [
			' —Å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º –¥–µ—Ä–µ–≤–æ–º –∏ —Å–≤–µ—Ç–ª—ã–º–∏ —Ç–æ–Ω–∞–º–∏',
			' —Å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é',
			' —Å –ø—Ä–∏—Ä–æ–¥–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏',
		],
		industrial: [
			' —Å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—è–º–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º–∏',
			' —Å –±–µ—Ç–æ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–æ–π —ç—Å—Ç–µ—Ç–∏–∫–æ–π',
			' —Å –≥—Ä—É–±—ã–º–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏ –∏ —É—Ä–±–∞–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏–º —Å—Ç–∏–ª–µ–º',
		],
	};

	const details = styleDetails[style];
	description += details[Math.floor(Math.random() * details.length)];

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
	const functionalFeatures = [
		'. –≠—Ä–≥–æ–Ω–æ–º–∏—á–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–¥–æ–±—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã',
		'. –ü—Ä–æ–¥—É–º–∞–Ω–Ω–æ–µ –∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞',
		'. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–π –∑–æ–Ω—ã',
		'. –£–¥–æ–±–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –º–µ–±–µ–ª–∏',
		'. –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞',
	];

	description +=
		functionalFeatures[Math.floor(Math.random() * functionalFeatures.length)];

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
	const conclusions = [
		' –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫—Ä–∞—Å–æ—Ç—ã –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç–∏.',
		' –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∂–∏–∑–Ω–∏.',
		' –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω.',
		' –°—Ç–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ–º–∞.',
		' –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —ç—Å—Ç–µ—Ç–∏–∫–∞ –≤ –≥–∞—Ä–º–æ–Ω–∏–∏.',
	];

	description += conclusions[Math.floor(Math.random() * conclusions.length)];

	return description;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é AI –º–æ–¥–µ–ª—å (CLIP)
async function analyzeWithCLIP(imagePath) {
	try {
		const { exec } = await import('child_process');
		const { promisify } = await import('util');
		const execAsync = promisify(exec);

		// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
		const pythonScript = `
import torch
import clip
from PIL import Image
import json
import sys

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å CLIP
device = "cuda" if torch.cuda.is_available() else "cpu"
model, preprocess = clip.load("ViT-B/32", device=device)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
image_path = "${imagePath.replace(/\\/g, '\\\\')}"
image = preprocess(Image.open(image_path)).unsqueeze(0).to(device)

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
text_descriptions = [
    "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫—É—Ö–Ω—è",
    "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫—É—Ö–Ω—è", 
    "—Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∞—è –∫—É—Ö–Ω—è",
    "–∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–∞—è –∫—É—Ö–Ω—è",
    "–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∫—É—Ö–Ω—è",
    "—ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –∫—É—Ö–Ω—è",
    "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫—É—Ö–Ω—è",
    "—Å—Ç–∏–ª—å–Ω–∞—è –∫—É—Ö–Ω—è"
]

text = clip.tokenize(text_descriptions).to(device)

# –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
with torch.no_grad():
    image_features = model.encode_image(image)
    text_features = model.encode_text(text)
    
    logits_per_image, logits_per_text = model(image, text)
    probs = logits_per_image.softmax(dim=-1).cpu().numpy()

# –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
best_idx = probs.argmax()
best_description = text_descriptions[best_idx]
confidence = probs[0][best_idx]

result = {
    "description": best_description,
    "confidence": float(confidence),
    "all_scores": {desc: float(probs[0][i]) for i, desc in enumerate(text_descriptions)}
}

print(json.dumps(result, ensure_ascii=False))
`;

		const tempScriptPath = path.join(__dirname, 'temp_analysis.py');
		fs.writeFileSync(tempScriptPath, pythonScript, 'utf8');

		const { stdout } = await execAsync(`python "${tempScriptPath}"`);
		const result = JSON.parse(stdout);

		// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
		fs.unlinkSync(tempScriptPath);

		return `AI –∞–Ω–∞–ª–∏–∑: ${result.description} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(
			result.confidence * 100
		)}%)`;
	} catch (error) {
		console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
		return null;
	}
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
async function analyzeAllImages() {
	console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
	console.log(`üìÅ –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º: ${imagesPath}`);

	if (!fs.existsSync(imagesPath)) {
		console.log('‚ùå –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
		return;
	}

	const projects = fs
		.readdirSync(imagesPath, { withFileTypes: true })
		.filter(dirent => dirent.isDirectory())
		.map(dirent => dirent.name)
		.sort();

	console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);

	const allResults = {};

	for (const project of projects) {
		console.log(`\nüì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç: ${project}`);
		const projectPath = path.join(imagesPath, project);

		try {
			const files = fs
				.readdirSync(projectPath)
				.filter(file => /\.(jpg|jpeg|png)$/i.test(file))
				.sort();

			if (files.length === 0) {
				console.log(`‚ö†Ô∏è –í –ø—Ä–æ–µ–∫—Ç–µ ${project} –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
				continue;
			}

			console.log(`   üì∑ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${files.length}`);

			const projectResults = {
				project: project,
				images: [],
				summary: {
					totalImages: files.length,
					styles: {},
					averageSize: 0,
				},
			};

			let totalSize = 0;

			for (const imageFile of files) {
				const imagePath = path.join(projectPath, imageFile);
				const stats = fs.statSync(imagePath);
				const fileSizeKB = Math.round(stats.size / 1024);
				totalSize += fileSizeKB;

				console.log(`   üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${imageFile} (${fileSizeKB}KB)`);

				let description;

				// –ü—Ä–æ–±—É–µ–º AI –∞–Ω–∞–ª–∏–∑, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
				if (ANALYSIS_CONFIG.useAI) {
					description = await analyzeWithCLIP(imagePath);
				}

				// –ï—Å–ª–∏ AI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
				if (!description && ANALYSIS_CONFIG.useSimpleAnalysis) {
					description = createDetailedDescription(imagePath, imageFile);
				}

				if (!description) {
					description = '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
				}

				const imageResult = {
					filename: imageFile,
					sizeKB: fileSizeKB,
					description: description,
					style: detectKitchenStyle(imageFile),
					timestamp: new Date().toISOString(),
				};

				projectResults.images.push(imageResult);

				// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
				const style = imageResult.style;
				projectResults.summary.styles[style] =
					(projectResults.summary.styles[style] || 0) + 1;

				console.log(`   ‚úÖ ${description.substring(0, 60)}...`);
			}

			projectResults.summary.averageSize = Math.round(totalSize / files.length);

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
			if (ANALYSIS_CONFIG.createJSON) {
				const jsonPath = path.join(projectPath, 'analysis-results.json');
				fs.writeFileSync(
					jsonPath,
					JSON.stringify(projectResults, null, 2),
					'utf8'
				);
				console.log(`   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞`);
			}

			allResults[project] = projectResults;
		} catch (error) {
			console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${project}: ${error.message}`);
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	if (ANALYSIS_CONFIG.createJSON) {
		const overallResultsPath = path.join(imagesPath, 'overall-analysis.json');
		fs.writeFileSync(
			overallResultsPath,
			JSON.stringify(allResults, null, 2),
			'utf8'
		);
		console.log(`\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞`);
	}

	// –°–æ–∑–¥–∞–µ–º HTML –≥–∞–ª–µ—Ä–µ—é
	if (ANALYSIS_CONFIG.createHTML) {
		createAdvancedHTMLGallery(allResults);
	}

	console.log('\nüéâ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
	printSummary(allResults);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π HTML –≥–∞–ª–µ—Ä–µ–∏
function createAdvancedHTMLGallery(results) {
	console.log('üåê –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é HTML –≥–∞–ª–µ—Ä–µ—é...');

	let html = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–Ω–∞–ª–∏–∑ –∫—É—Ö–æ–Ω—å - AI –ì–∞–ª–µ—Ä–µ—è</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; color: white; margin-bottom: 40px; }
        .header h1 { font-size: 3em; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
        .header p { font-size: 1.2em; opacity: 0.9; }
        .project { background: white; margin: 30px 0; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }
        .project-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
        .project-title { font-size: 2em; color: #333; border-bottom: 3px solid #667eea; padding-bottom: 10px; }
        .project-stats { background: #f8f9fa; padding: 15px; border-radius: 10px; }
        .images-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 25px; margin: 25px 0; }
        .image-card { background: #f8f9fa; border-radius: 12px; overflow: hidden; box-shadow: 0 5px 15px rgba(0,0,0,0.1); transition: transform 0.3s ease; }
        .image-card:hover { transform: translateY(-5px); }
        .image-card img { width: 100%; height: 250px; object-fit: cover; }
        .image-info { padding: 20px; }
        .image-title { font-weight: bold; color: #333; margin-bottom: 10px; }
        .image-description { color: #666; line-height: 1.6; font-size: 14px; }
        .style-badge { display: inline-block; background: #667eea; color: white; padding: 5px 12px; border-radius: 20px; font-size: 12px; margin-top: 10px; }
        .summary { background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 30px; border-radius: 15px; margin: 30px 0; }
        .summary h3 { margin-bottom: 20px; font-size: 1.5em; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }
        .stat-item { background: rgba(255,255,255,0.1); padding: 15px; border-radius: 10px; text-align: center; }
        .stat-number { font-size: 2em; font-weight: bold; }
        .stat-label { font-size: 0.9em; opacity: 0.9; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè† AI –ê–Ω–∞–ª–∏–∑ –∫—É—Ö–æ–Ω—å</h1>
            <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –∫—É—Ö–æ–Ω—å</p>
        </div>
`;

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	const totalProjects = Object.keys(results).length;
	const totalImages = Object.values(results).reduce(
		(sum, project) => sum + project.summary.totalImages,
		0
	);
	const totalSize = Object.values(results).reduce(
		(sum, project) =>
			sum + project.summary.averageSize * project.summary.totalImages,
		0
	);

	html += `
        <div class="summary">
            <h3>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-number">${totalProjects}</div>
                    <div class="stat-label">–ü—Ä–æ–µ–∫—Ç–æ–≤</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${totalImages}</div>
                    <div class="stat-label">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${Math.round(
											totalSize / totalImages
										)}KB</div>
                    <div class="stat-label">–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä</div>
                </div>
            </div>
        </div>
`;

	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã
	for (const [projectName, project] of Object.entries(results)) {
		html += `
        <div class="project">
            <div class="project-header">
                <div class="project-title">${projectName}</div>
                <div class="project-stats">
                    <strong>${project.summary.totalImages}</strong> –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π<br>
                    –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: <strong>${project.summary.averageSize}KB</strong>
                </div>
            </div>
            <div class="images-grid">
`;

		for (const image of project.images) {
			const imagePath = `images/portfolio/${projectName}/${image.filename}`;
			html += `
                <div class="image-card">
                    <img src="${imagePath}" alt="${image.filename}" loading="lazy">
                    <div class="image-info">
                        <div class="image-title">${image.filename}</div>
                        <div class="image-description">${image.description}</div>
                        <span class="style-badge">${image.style}</span>
                    </div>
                </div>
`;
		}

		html += `
            </div>
        </div>
`;
	}

	html += `
    </div>
</body>
</html>
`;

	const htmlPath = path.join(__dirname, '..', 'kitchen-analysis-gallery.html');
	fs.writeFileSync(htmlPath, html, 'utf8');
	console.log(`‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è HTML –≥–∞–ª–µ—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞: ${htmlPath}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–≤–æ–¥–∫–∏
function printSummary(results) {
	console.log('\nüìà –°–í–û–î–ö–ê –ê–ù–ê–õ–ò–ó–ê:');
	console.log('='.repeat(50));

	const totalProjects = Object.keys(results).length;
	const totalImages = Object.values(results).reduce(
		(sum, project) => sum + project.summary.totalImages,
		0
	);

	console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${totalProjects}`);
	console.log(`–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${totalImages}`);

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
	const allStyles = {};
	Object.values(results).forEach(project => {
		Object.entries(project.summary.styles).forEach(([style, count]) => {
			allStyles[style] = (allStyles[style] || 0) + count;
		});
	});

	console.log('\n–°—Ç–∏–ª–∏ –∫—É—Ö–æ–Ω—å:');
	Object.entries(allStyles).forEach(([style, count]) => {
		console.log(`  ${style}: ${count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
	});
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeAllImages().catch(console.error);
