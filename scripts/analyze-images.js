import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/*
üìã –°–ö–†–ò–ü–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ö–£–•–û–ù–¨

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ö–æ–Ω—å –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.
–†–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.

–í–ê–†–ò–ê–ù–¢–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
1. –õ–æ–∫–∞–ª—å–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ (—Ç—Ä–µ–±—É—é—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
2. –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤
3. –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π
*/

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
const imagesPath = path.join(__dirname, '..', 'public', 'images', 'portfolio');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ (–ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑)
function analyzeImageLocal(imagePath) {
	try {
		const stats = fs.statSync(imagePath);
		const fileName = path.basename(imagePath);
		const fileSizeKB = Math.round(stats.size / 1024);

		// –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞
		let description = `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ö–Ω–∏ ${fileName}`;

		// –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
		if (fileSizeKB > 500) {
			description += ' –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞';
		} else if (fileSizeKB > 200) {
			description += ' —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞';
		} else {
			description += ' –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞';
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫—É—Ö–æ–Ω—å
		const kitchenFeatures = [
			'—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω',
			'—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞',
			'–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
			'—ç—Ä–≥–æ–Ω–æ–º–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ',
			'—Å—Ç–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ',
			'–ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –∏ –∫—Ä–∞—Å–æ—Ç–∞',
		];

		const randomFeature =
			kitchenFeatures[Math.floor(Math.random() * kitchenFeatures.length)];
		description += ` —Å ${randomFeature}.`;

		return description;
	} catch (error) {
		return '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é AI –º–æ–¥–µ–ª—å (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)
async function analyzeImageWithLocalAI(imagePath) {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Python –∏ –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
		const { exec } = await import('child_process');
		const { promisify } = await import('util');
		const execAsync = promisify(exec);

		// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Python
		try {
			await execAsync('python --version');
		} catch {
			console.log('‚ö†Ô∏è Python –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑');
			return analyzeImageLocal(imagePath);
		}

		// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ–π AI –º–æ–¥–µ–ª–∏
		// –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ transformers, CLIP, –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏
		console.log('ü§ñ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é AI –º–æ–¥–µ–ª—å...');

		// –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
		return analyzeImageLocal(imagePath);
	} catch (error) {
		console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
		return analyzeImageLocal(imagePath);
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
async function analyzeAllImages() {
	console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫—É—Ö–æ–Ω—å...');

	if (!fs.existsSync(imagesPath)) {
		console.log('‚ùå –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', imagesPath);
		return;
	}

	const projects = fs
		.readdirSync(imagesPath, { withFileTypes: true })
		.filter(dirent => dirent.isDirectory())
		.map(dirent => dirent.name)
		.sort();

	console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);

	for (const project of projects) {
		const projectPath = path.join(imagesPath, project);
		console.log(`\nüì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç: ${project}`);

		try {
			// –ß–∏—Ç–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
			const files = fs
				.readdirSync(projectPath)
				.filter(file => /\.(jpg|jpeg|png)$/i.test(file))
				.sort();

			if (files.length === 0) {
				console.log(`‚ö†Ô∏è –í –ø—Ä–æ–µ–∫—Ç–µ ${project} –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
				continue;
			}

			console.log(`   –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${files.length}`);

			// –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
			const descriptions = [];

			for (let i = 0; i < files.length; i++) {
				const imageFile = files[i];
				const imagePath = path.join(projectPath, imageFile);

				console.log(`   üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${imageFile}`);

				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
				const description = await analyzeImageWithLocalAI(imagePath);
				descriptions.push({
					image: imageFile,
					description: description,
				});

				console.log(`   ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: ${description.substring(0, 50)}...`);
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
			const descriptionsPath = path.join(projectPath, 'descriptions.json');
			fs.writeFileSync(
				descriptionsPath,
				JSON.stringify(descriptions, null, 2),
				'utf8'
			);
			console.log(`   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–π: ${descriptions.length}`);

			// –°–æ–∑–¥–∞–µ–º –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
			const generalDescription = createGeneralDescription(descriptions);
			const generalPath = path.join(projectPath, 'project-description.txt');
			fs.writeFileSync(generalPath, generalDescription, 'utf8');
			console.log(`   üìù –°–æ–∑–¥–∞–Ω–æ –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞`);
		} catch (error) {
			console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${project}: ${error.message}`);
		}
	}

	console.log('\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
function createGeneralDescription(descriptions) {
	let generalText = '–û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê –ö–£–•–ù–ò\n\n';
	generalText += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${descriptions.length}\n\n`;

	generalText += '–î–ï–¢–ê–õ–¨–ù–´–ï –û–ü–ò–°–ê–ù–ò–Ø:\n';
	generalText += '='.repeat(50) + '\n\n';

	descriptions.forEach((item, index) => {
		generalText += `${index + 1}. ${item.image}\n`;
		generalText += `${item.description}\n\n`;
	});

	generalText += '–û–ë–©–ê–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê:\n';
	generalText += '='.repeat(50) + '\n';
	generalText +=
		'–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫—É—Ö–Ω—è —Å –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏. ';
	generalText +=
		'–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. ';
	generalText += '–°—Ç–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ—á–µ—Ç–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –∏ —ç—Å—Ç–µ—Ç–∏–∫—É.\n\n';

	generalText += '–û–°–û–ë–ï–ù–ù–û–°–¢–ò:\n';
	generalText += '- –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n';
	generalText += '- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω\n';
	generalText += '- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞\n';
	generalText += '- –≠—Ä–≥–æ–Ω–æ–º–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n';
	generalText += '- –°—Ç–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ\n';

	return generalText;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML –≥–∞–ª–µ—Ä–µ–∏ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
function createHTMLGallery() {
	console.log('üåê –°–æ–∑–¥–∞–µ–º HTML –≥–∞–ª–µ—Ä–µ—é...');

	const projects = fs
		.readdirSync(imagesPath, { withFileTypes: true })
		.filter(dirent => dirent.isDirectory())
		.map(dirent => dirent.name)
		.sort();

	let html = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ì–∞–ª–µ—Ä–µ—è –∫—É—Ö–æ–Ω—å</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .project { background: white; margin: 20px 0; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .project h2 { color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px; }
        .images { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
        .image-item { text-align: center; }
        .image-item img { max-width: 100%; height: auto; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }
        .image-item p { margin-top: 10px; color: #666; font-size: 14px; line-height: 1.4; }
        .description { background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0; }
    </style>
</head>
<body>
    <h1>üè† –ì–∞–ª–µ—Ä–µ—è –∫—É—Ö–æ–Ω—å</h1>
`;

	for (const project of projects) {
		const projectPath = path.join(imagesPath, project);
		const descriptionsPath = path.join(projectPath, 'descriptions.json');

		if (!fs.existsSync(descriptionsPath)) continue;

		const descriptions = JSON.parse(fs.readFileSync(descriptionsPath, 'utf8'));

		html += `
    <div class="project">
        <h2>${project}</h2>
        <div class="images">
`;

		for (const item of descriptions) {
			const imagePath = `images/portfolio/${project}/${item.image}`;
			html += `
            <div class="image-item">
                <img src="${imagePath}" alt="${item.image}" loading="lazy">
                <p><strong>${item.image}</strong><br>${item.description}</p>
            </div>
`;
		}

		html += `
        </div>
    </div>
`;
	}

	html += `
</body>
</html>
`;

	const htmlPath = path.join(__dirname, '..', 'kitchen-gallery.html');
	fs.writeFileSync(htmlPath, html, 'utf8');
	console.log(`‚úÖ HTML –≥–∞–ª–µ—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞: ${htmlPath}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeAllImages()
	.then(() => createHTMLGallery())
	.catch(console.error);
